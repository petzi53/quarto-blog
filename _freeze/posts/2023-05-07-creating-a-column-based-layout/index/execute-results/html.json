{
  "hash": "1c0017d54e72bbe33b5d1b13a1cbba7c",
  "result": {
    "markdown": "---\ntitle: \"Creating a column-based layout\"\nsubtitle: \"Changing the Page Layout in Quarto\"\ndescription:  |\n  Do you want to place two figures side by side or write text in parallel in\n  different columns? The post describes four methods to turn part of your blog\n  post into a column-based layout.\nauthor: \"Peter Baumgartner\"\ndate: \"2023-05-07\"\nimage: \"three-columns-min.jpg\"\nimage-alt: \"Three classical greek pillars\"\ncategories: [blog, quarto, how-to]\ndate-modified: \"2023-05-07\"\ndraft: false\nengine: knitr\n---\n\n\n![From [PxHere](https://pxhere.com/en/photo/649542) (CC0, Public\nDomain)](three-columns-min.jpg){fig-align=\"center\"}\n\nIn my first two articles, I encountered the problem of changing the page\nlayout several times: So I wanted -- for instance -- in my article [How\nto delete Git\nbranches](https://l3lab.net/posts/2023-05-05-how-to-delete-git-branches/)\ntwo small screenshots to appear side by side.\n\n## Help page about article layout\n\nWhen I looked at the Quarto help pages, I found a [chapter about article\nlayouts](https://quarto.org/docs/authoring/article-layout.html). But it\ntreated the layout of pages in a more general way by answering the\nfollowing questions:\n\n-   How to use the whole main content region?\n\n-   How can content overflow this standard content region?\n\n-   How can one span the width of the entire page?\n\n-   How can authors place content on the document margin?\n\nI think that these questions address pretty special requirements. I just\nwanted a solution for content items side by side. This support page\nabout the article layout was not helpful to me.\n\n## Using a table failed\n\nMy first approach was to use a table to position images side by side. I\ncreated a one-row / two-column table with the visual editor of RStudio\nand uploaded in each column a picture. But the screenshots didn't\nappear. Whenever I rendered the page, Quarto told me, \"404: Not Found\".\n\n![Looking after rendering into the tab \"Background Jobs\" revealed these\nerror\nmessages](images/error-message-image-not-found-min.png){fig-alt=\"Two red error messages\"\nfig-align=\"center\"}\n\nAs I inspected the source code, I saw the reason: The long image URLs\ndidn't fit in the table column, and therefore forced line breaks that\ndestroyed the URLs.\n\n![Source code generated by RStudio after loading two images into a\none-row / two-columns\ndesing](images/wrong-forced-line-breaks-min.png){fig-alt=\"The source code shows that the URLs are wrapped in wrong places and therefore broken\"\nfig-align=\"center\"}\n\n## Using pandoc extensions\n\nAfter long research, I found three answers to my question via\nStackOverflow. They all used the [fenced_divs extension of\npandoc](https://pandoc.org/MANUAL.html#extension-fenced_divs).\n\nIt is easier to explain the method after I have presented these three\nexamples. I will use the same toy text sample for the following\nillustration.\n\n**Text in the left column:**\n\n> I would like to have text here\n\n> Sentence becomes longer, it should automatically stay in their column\n\n**Text in the right column:**\n\n> and here\n\n> More text\n\n### Example 1: Two columns separated by a small third column\n\n``` r\n---\ntitle: \"Two columns separated by a small third column\"\nformat: html\nengine: knitr\n---\n\n:::: {.columns}\n\n::: {.column width=\"70%\"}\nI would like to have text here\n\nSentence becomes longer, it should automatically stay in their column\n:::\n\n::: {.column width=\"10%\"}\n<!-- empty column to create gap -->\n:::\n\n::: {.column width=\"20%\"}\nand here\n\nMore text\n:::\n\n::::\n```\n\nThe example is --- slightly redacted --- taken [from shafee via\nStackOverflow](https://stackoverflow.com/a/74162353/7322615)\n\n### Example 2: Two columns using the bootstrap CSS grid system\n\n``` r\n---\ntitle: \"Two columns using the bootstrap CSS grid system\"\nformat: html\nengine: knitr\n---\n  \n  \n::: {.grid}\n\n::: {.g-col-6}\n\n## First column \nI would like to have text here\n\nSentence becomes longer, it should automatically stay in their column\n:::\n  \n::: {.g-col-6}\n\n## Second column \n\nand here\n\nMore text\n\n:::\n  \n:::\n```\n\nThe example is --- slightly redacted --- taken [from Julian via\nStackOverflow](https://stackoverflow.com/a/75383017/7322615).\n\n### Example 3: Two columns with text center-aligned\n\n```` r\n---\ntitle: \"Two columns with text center-aligned\"\nformat: html\nengine: knitr\n---\n    \n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.column {\ntext-align: center;\n}\n</style>\n:::\n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\nI would like to have text here\n\nSentence becomes longer, it should automatically stay in their column\n:::\n\n::: {.column width=\"50%\"}\n\nand here\n\nMore text\n:::\n\n::::\n````\n\nThe example is --- slightly redacted --- [taken again from shafee via\nStackOverflow](https://stackoverflow.com/a/73307989/7322615).\n\n## Fenced divs in Pandoc: How do they work?\n\n### What is Pandoc?\n\n[Pandoc](https://pandoc.org/index.html) is an open-source universal\ndocument converter. Pandoc is licensed with the very permissive GNU[^1]\nGeneral Public License\n([GPL](https://www.gnu.org/licenses/gpl-3.0.html)). Currently, Pandoc\nsupports the conversion of more than 60 formats. [John\nMacFarlane](https://johnmacfarlane.net/), a philosophy professor at the\nUniversity of Berkeley, is developing and maintaining Pandoc.\n\n[^1]: GNU is a recursive acronym and means: [GNU's Not\n    Unix](https://en.wikipedia.org/wiki/GNU).\n\nRStudio IDE ships with a pandoc binary. The path is stored in the\n`RSTUDIO_PANDOC` environment variable. You can get the path and the\ncurrent pandoc version used by RStudio with `rmarkdown::find_pandoc()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrmarkdown::find_pandoc()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$version\n[1] '3.1.2'\n\n$dir\n[1] \"/usr/local/bin\"\n```\n:::\n:::\n\n\nTo get the version number on your machine type in the terminal:\n\n``` zsh\npandoc --version\n(base) path@my_machine quarto-blog % pandoc --version\npandoc 3.1.2\nFeatures: +server +lua\nScripting engine: Lua 5.4\nUser data directory: /Users/petzi/.pandoc\nCopyright (C) 2006-2023 John MacFarlane. Web:  https://pandoc.org\nThis is free software; see the source for copying conditions. There is no\nwarranty, not even for merchantability or fitness for a particular purpose.\n(base) path@my_machine quarto-blog % \n```\n\nThis result shows I have two different pandoc versions installed --- a\npotential danger for a version conflict: One version installed RStudio,\nand the other I downloaded with the macOS package manager\n[Homebrew](https://brew.sh/).\n\n### Div Blocks in Pandoc\n\nThe pandoc `div` extension allows a special fenced syntax to generate\nHTML div-tags:\n\n> A `div` starts with a fence containing at least three consecutive\n> colons plus some attributes. The attributes may optionally be followed\n> by another string of consecutive colons. ... \\[O\\]ne can use either\n> attributes in curly braces or a single unbraced word, which will be\n> treated as a class name. The Div ends with another line containing a\n> string of at least three consecutive colons. The fenced Div should be\n> separated by blank lines from preceding and following blocks. From\n> [Extension:\n> `fenced_divs`](https://pandoc.org/MANUAL.html#extension-fenced_divs)\n\nTwo more remarks:\n\n1.  If you are going to nest pandoc div directives, you must provide\n    more colons for the outer divs than the inner divs.\n\n2.  To prevent that Quarto uses the jupyter engine, you must provide\n    engine: knitr in the YAML front matter.\n\n## A genuine Quarto solution\n\nAfter I looked around at how to create a two-**text**Â column layout for\na while, I found a simple Quarto answer. Hidden in the help page about\nfigures, I found the remark:\n\n> You can treat any markdown content you want as a figure by enclosing\n> it in Pandoc div block with an identifier prefaced with #fig-. See the\n> [first sentence under the header\n> `Figure Divs`](https://quarto.org/docs/authoring/figures.html#figure-divs).\n\nThe first part of the sentence, \"You can treat any markdown content you\nwant as a figure...\" could be reversed to the concept that a layout for\nfigures works similarly to a design for text.\n\nI came up with the following solution that I also published to answer\nthe [StackOverflow post](https://stackoverflow.com/a/76191188/7322615).\n\n### Version 1 with equally wide columns\n\n``` r\n\n---\ntitle: \"Two columns layout Quarto with equally wide columns\"\nformat: html\nengine: knitr\n---\n\n::: {layout-ncol=2}\n\n\nFirst column\n\nSecond column\n\nI would like to have text here\n\nand here\n\nSentence becomes longer, it should automatically stay in their column\n\nMore text\n\n:::\n```\n\nThe above solution uses the Quarto `layout-ncol` attribute. There is\nalso a `layout-nrow`attribute. In both directives, you can specify the\nnumber of columns respectively rows.\n\n### Version 2 with different wide columns\n\n``` r\n---\ntitle: \"Two columns layout Quarto with different wide columns\"\nformat: html\nengine: knitr\n---\n\n::: {layout=\"[[10,5], [40,20], [26,13], [2,1]]\"}\n\n\n**First column**\n\n**Second column**\n\nI would like to have text here\n\nand here\n\nSentence becomes longer, it should automatically stay in their column\n\nMore text\n\n:::\n```\n\nThe version 2 solution uses the general form of the `layout` attribute.\nIt is followed by a 2-dimensional array where the first dimension\ndefines rows and the second columns. Note that the used row / column\nnumbers in the second version are arbitrary. They just provide the\ndesired proportion of 2:1. The code translates to \"create four rows,\nwhere the first column has always the double size of the second column.\"\n\nSome final remarks on both of the last examples:\n\n1.  There needs to be an empty line between every paragraph (here\n    sentence). This structure is necessary so Pandoc can see the break\n    and addresses the next column.\n\n2.  You need to use the `engine: knitr` command to prevent rendering\n    with the jupyter engine.\n\n## Conclusion\n\nThere are many possibilities for a creative layout design in Quarto.\nThis article shows the use of Pandocs `div block` directives with five\ndifferent methods. These layout directives can be generalized from a\ntwo-column to a many column layout\n\n1.  Several columns with varying percentages of widths.\n\n2.  Several columns using the very flexible bootstrap CSS grid system.\n\n3.  Several columns with formatted explicitly with a CSS style.\n\n4.  Several columns with the same width using the Quarto `layout-ncol`\n    or `layout-nrow` attribute.\n\n5.  Several columns with different widths using the Quarto general\n    `layout` attribute.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}