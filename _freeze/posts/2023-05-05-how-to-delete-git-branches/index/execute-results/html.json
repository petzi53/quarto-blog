{
  "hash": "8c4f1e4e92c97de1c05dcd6fa05ed21a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"How to delete Git branches\"\nsubtitle: \"The limits of RStudio with the `pr_*()` family of the {[usethis](https://usethis.r-lib.org/)} functions\"\ndescription:  |\n  The article explains how I finally succeeded in deleting different branches\n  in Git. It turned out – contrary to my previous mental model – that there\n  are not only two branches but three (local, remote origin, and local\n  remote-tracking branch).\nauthor: \"Peter Baumgartner\"\ndate: \"2023-05-05\"\nimage: \"git-cover-min.png\"\nimage-alt: \"Git Logo\"\ncategories: [git, github, how-to]\ndate-modified: \"2024-07-20\"\nengine: knitr\ndraft: false\n---\n\n\n\n<hr class=mytitle>\n\n## If a pull request is not accepted...\n\nAs I am not very experienced with R and coding, my knowledge of using\nGit and GitHub is limited. Usually, I use the `pr_*()` family of\n{[usethis](https://usethis.r-lib.org/ \"Automates repetitive tasks that arise during project setup and development\")}\nfunctions as pull request helpers. They work very well -- as long as the\nworkflow follows the standard (successful) workflow:\n\n-   Initiate the pull request with `pr_init(<branch name>)`\n-   Submit the changes in the new branch with `pr_push()`.\n-   Click the \"Create pull request\"-button to make the PR.\n-   After the code is accepted and merged, conclude the process with\n    `pr_finish()`.\n\nThis sequence does not fly if the workflow deviates from the above\nmodel. The standard procedure describes the scenario of a discussion\nbetween contributor and reviewer that finally results in the acceptance\nof the PR. But what about a rejection of the PR?\n\n## ... deletion of the remote branch with GitHub is not enough\n\nThis situation happened to me after I proposed fixing a typo for a repo\nthat had been frozen because of a necessary general overhaul. I thought\nto delete the submitted remote branch at the GitHub site would bring me\nback to my initial position.\n\n![**Screenshot 1**: Delete obsolete branch \"typo\" at GitHub site\n(simulated for this\narticle).](images/delete-remote-branch-at-github-min.png){fig-alt=\"A screenshot shows the default branch \\\"master\\\" and \\\"Your branches\\\" named \\\"typo,\\\" which also figures under \\\"Active branches\\\". The cursor hovers over the trash can to delete the active branch \\\"typo\\\".\"\nfig-align=\"center\"}\n\nBut back in RStudio, it turned out that the deleted branch was still\nthere.\n\n![**Screenshot 2**: Local and Remote branches seen in\nRStudio](images/git-branches-at-rstudio.png){fig-alt=\"The window shows under the two headings \\\"(Local Branches\\\") and (Remote: Origin) with \\\"master\\\" and \\\"typo\\\" two branches.\"\nfig-align=\"center\"}\n\nOk, I understood that my remote action did not delete the local branch\ntoo. But why was the remote branch still there? After all, I had it just\nremoved. (I double-checked the deletion, and the remote branch at the\nremote GitHub site was, in fact, completely gone.\n\n## There are three, not two branches\n\nAfter some research, I found an appropriate question-answer dialog ([How\ndo I delete a Git branch locally and\nremotely?](https://stackoverflow.com/questions/2003505/how-do-i-delete-a-git-branch-locally-and-remotely))\nat StackOverflow with more than 11 million views! It seems that I am not\nthe only one surprised by the situation.\n\nAfter reading this and other answers at SO, I learned that there are\nthree different branches:\n\n> When you're dealing with deleting branches both locally and remotely,\n> keep in mind that there are three different branches involved:\n>\n> -   The local branch X.\n> -   The remote origin branch X.\n> -   The local remote-tracking branch origin/X that tracks the remote\n>     branch X. [Quote from the top second\n>     answer](https://stackoverflow.com/a/23961231/7322615)\n\nI deleted the remote origin branch X manually at the GitHub site. The\nlocal branch but also the local remote-tracking branch were still\nfunctional!\n\nFor every one of these three branches, one needs different commands to\ndelete them. And here -- as far as I understood -- we have met the\nlimits of RStudio and/or {usethis}. For the following commands, you have\nto change from the console to the terminal.\n\n## Useful commands for deleting branches\n\n::: {.callout-tip collapse=\"true\"}\n##### Set comment character for interactive terminal use\n\nIf you are using the [Z shell\n(zsh)](https://en.wikipedia.org/wiki/Z_shell) you have to set\n`setopt interactivecomments` for interactive use either in your\n`~/.zshrc` file or write this command into the terminal for temporary\nuse during the terminal session. In contrast to `ksh` (Korn shell), `sh`\n(Bourne shell), and `bash` (Bourne-again shell) the `#` is for the `zsh`\n(Z shell) only set as the comment character for non-interactive use\n(scripts).\n:::\n\n#### Deleting a remote branch\n\n``` {.zsh filename=\"Terminal\"}\nsetopt interactivecomments\ngit push origin -d <branch>\n```\n\n#### Deleting a local branch\n\n``` {.zsh filename=\"Terminal\"}\ngit checkout master # change branch, you can't delete a branch you are working on\ngit branch -d <branch>\ngit branch -D <branch> # force-delete un-merged branches\n```\n\n#### Deleting a local remote-tracking branch\n\n``` {.zsh filename=\"Terminal\"}\ngit branch -dr <remote>/<branch> # 'dr' stands for \"delete remotes\"\ngit branch -dr origin/dev        # example\n\n# Delete multiple obsolete remote-tracking branches\ngit fetch <remote> -p  # 'p' stands for \"prune\"\ngit fetch origin -p    # example\n```\n\n::: callout-warning\nDon't forget to refresh the RStudio listing to verify that you have\ndeleted the branches.\n:::\n\n\n\n::: {.cell}\n<style type=\"text/css\">\n.column {\ntext-align: center;\n}\n</style>\n:::\n\n\n\n::: columns\n::: {.column width=\"50%\"}\n![Click on the circle symbol at the top right\ncorner...](images/rstudio-refresh-branch-listing-circle-min.png){fig-align=\"center\"}\n:::\n\n::: {.column width=\"50%\"}\n![... and choose \"Refresh Now\" to list the branches currently\navailable.](images/rstudio-refresh-branch-listing-manually-min.png){fig-align=\"center\"}\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}