[
  {
    "objectID": "privacy.html",
    "href": "privacy.html",
    "title": "Privacy Policy",
    "section": "",
    "text": "Several places on this website require you to identify yourself:"
  },
  {
    "objectID": "privacy.html#comments",
    "href": "privacy.html#comments",
    "title": "Privacy Policy",
    "section": "Comments",
    "text": "Comments\nThis Quarto website uses Hypothesis as a commenting system. To control your data with Hypothesis, read the Hypothesis Privacy Policy."
  },
  {
    "objectID": "privacy.html#contact",
    "href": "privacy.html#contact",
    "title": "Privacy Policy",
    "section": "Contact",
    "text": "Contact\nThe contact form is a service by formspree. They only store contents of the last 100 form submissions and delete the rest. Formspree is open source so that you can check, what they are doing. The emails themselves are sent using another open source project: SendGrid’s API, so on that end, their privacy policies apply.\nBy filling out the form, I get your name, email address, and your text. I will do nothing except handling your mailed concern. I will delete all mail sent by formspree at the latest after 12 months."
  },
  {
    "objectID": "privacy.html#google-analytics",
    "href": "privacy.html#google-analytics",
    "title": "Privacy Policy",
    "section": "Google Analytics",
    "text": "Google Analytics\nThe only personal information collected while you visit this site is non-identifying information, such as browser type and operating system. This information is collected by Google Analytics for measuring visitor traffic to this site.\nFor each visitor to reach the site, Google Analytics collects the following non-personally identifiable information, including but not limited to browser type, version and language, operating system, pages viewed while browsing the site, page access times and referring website address. This information is presented to me as aggregated reports to gauge visitor traffic and trends.\nThis information is collected via cookies. Most web browsers allow you to control the handling of cookies. To the best of my knowledge, you can disable all cookies for this website without in any way reducing the functionality for you. Read here to learn what cookies are and how to control or disable them."
  },
  {
    "objectID": "disclaimer.html",
    "href": "disclaimer.html",
    "title": "Disclaimer",
    "section": "",
    "text": "Peter Baumgartner Herzogstraße 1 3500 Krems an der Donau"
  },
  {
    "objectID": "disclaimer.html#media-owner",
    "href": "disclaimer.html#media-owner",
    "title": "Disclaimer",
    "section": "",
    "text": "Peter Baumgartner Herzogstraße 1 3500 Krems an der Donau"
  },
  {
    "objectID": "disclaimer.html#website",
    "href": "disclaimer.html#website",
    "title": "Disclaimer",
    "section": "Website",
    "text": "Website\n\nWebsite Content: Peter Baumgartner\nHosting: Acriba GmbH\nPhotos: Peter Baumgartner, if no other author is provided"
  },
  {
    "objectID": "disclaimer.html#declaration-about-the-editorial-policy",
    "href": "disclaimer.html#declaration-about-the-editorial-policy",
    "title": "Disclaimer",
    "section": "Declaration about the editorial policy",
    "text": "Declaration about the editorial policy\nLife Long Learning Lab (L3Lab) is a personal blog by me (Peter Baumgartner). It focuses on news and comments about the research and teaching on Technology Enhanced Learning (TEL) and Data Science Education with a special focus on R subjects. Using R as an tool for data analysis and interpretation ‘L3Lab’ covers other subjects as well.\nThe content of this website is my personal opinion. The purpose of this website is not commercial and is, therefore, no professional service provided."
  },
  {
    "objectID": "disclaimer.html#editorial-work",
    "href": "disclaimer.html#editorial-work",
    "title": "Disclaimer",
    "section": "Editorial work",
    "text": "Editorial work\nEditorial staff: Dr. Peter Baumgartner\nPowered by Quarto, an open-source scientific and technical publishing system\n\n\nThe information contained on https://l3lab.net website (the “Service”) is for general information purposes only.\n\n\n‘L3Lab’ assumes no responsibility for errors or omissions in the contents on the Service.\n\n\nIn no event shall ‘L3Lab’ be liable for any special, direct, indirect, consequential, or incidental damages or any damages whatsoever, whether in an action of contract, negligence or other torts, arising out of or in connection with the use of the Service or the contents of the Service. reserves the right to make additions, deletions, or modification to the contents on the Service at any time without prior notice.\nThe text of this Disclaimer for ‘Thought splinters’ is generated by TermsFeed\n\n\n‘L3Lab’ does not warrant that the website is free of viruses or other harmful components."
  },
  {
    "objectID": "posts/2023-05-07-creating-a-column-based-layout/index.html",
    "href": "posts/2023-05-07-creating-a-column-based-layout/index.html",
    "title": "Creating a column-based layout",
    "section": "",
    "text": "From PxHere (CC0, Public Domain)\nIn my first two articles, I encountered the problem of changing the page layout several times: So I wanted – for instance – in my article How to delete Git branches two small screenshots to appear side by side."
  },
  {
    "objectID": "posts/2023-05-07-creating-a-column-based-layout/index.html#help-page-about-article-layout",
    "href": "posts/2023-05-07-creating-a-column-based-layout/index.html#help-page-about-article-layout",
    "title": "Creating a column-based layout",
    "section": "Help page about article layout",
    "text": "Help page about article layout\nWhen I looked at the Quarto help pages, I found a chapter about article layouts. But it treated the layout of pages in a more general way by answering the following questions:\n\nHow to use the whole main content region?\nHow can content overflow this standard content region?\nHow can one span the width of the entire page?\nHow can authors place content on the document margin?\n\nI think that these questions address pretty special requirements. I just wanted a solution for content items side by side. This support page about the article layout was not helpful to me."
  },
  {
    "objectID": "posts/2023-05-07-creating-a-column-based-layout/index.html#using-a-table-failed",
    "href": "posts/2023-05-07-creating-a-column-based-layout/index.html#using-a-table-failed",
    "title": "Creating a column-based layout",
    "section": "Using a table failed",
    "text": "Using a table failed\nMy first approach was to use a table to position images side by side. I created a one-row / two-column table with the visual editor of RStudio and uploaded in each column a picture. But the screenshots didn’t appear. Whenever I rendered the page, Quarto told me, “404: Not Found”.\n\n\n\n\n\n\n\nLooking after rendering into the tab “Background Jobs” revealed these error messages\n\n\nAs I inspected the source code, I saw the reason: The long image URLs didn’t fit in the table column, and therefore forced line breaks that destroyed the URLs.\n\n\n\n\n\n\n\nScreenshot 1: Source code generated by RStudio after loading two images into a one-row / two-columns desing"
  },
  {
    "objectID": "posts/2023-05-07-creating-a-column-based-layout/index.html#using-pandoc-extensions",
    "href": "posts/2023-05-07-creating-a-column-based-layout/index.html#using-pandoc-extensions",
    "title": "Creating a column-based layout",
    "section": "Using pandoc extensions",
    "text": "Using pandoc extensions\nAfter long research, I found three answers to my question via StackOverflow. They all used the fenced_divs extension of pandoc.\nIt is easier to explain the method after I have presented these three examples. I will use the same toy text sample for the following illustration.\nText in the left column:\n\nI would like to have text here\n\n\nSentence becomes longer, it should automatically stay in their column\n\nText in the right column:\n\nand here\n\n\nMore text\n\n\nExample 1: Two columns separated by a small third column\nThe example is — slightly redacted — taken from shafee via StackOverflow\n\n\n\n\n\n\nShow the markdown code\n\n\n\n\n\n---\ntitle: \"Two columns separated by a small third column\"\nformat: html\nengine: knitr\n---\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\nI would like to have text here\n\nSentence becomes longer, it should automatically stay in their column\n:::\n\n::: {.column width=\"10%\"}\n&lt;!-- empty column to create gap --&gt;\n:::\n\n::: {.column width=\"20%\"}\nand here\n\nMore text\n:::\n\n::::\n\n\n\n\n\n\n\n\n\nShow the result\n\n\n\n\n\n\n\n\nFirst column\nI would like to have text here\nSentence becomes longer, it should automatically stay in their column\n\n\n\n\n\nSecond column\nand here\nMore text\n\n\n\n\n\n\n\n\nExample 2: Two columns using the bootstrap CSS grid system\nThe example is — slightly redacted — taken from Julian via StackOverflow.\n\n\n\n\n\n\nShow the markdown code\n\n\n\n\n\n---\ntitle: \"Two columns using the bootstrap CSS grid system\"\nformat: html\nengine: knitr\n---\n  \n  \n:::: {.grid}\n\n::: {.g-col-4}\n##### First column \nI would like to have text here\n\nSentence becomes longer, it should automatically stay in their column\n:::\n  \n::: {.g-col-4}\n##### Second column \n\nand here\n\nMore text\n:::\n  \n::::\n\n\n\n\n\n\n\n\n\nShow the result\n\n\n\n\n\n\n\nFirst column\nI would like to have text here\nSentence becomes longer, it should automatically stay in their column\n\n\nSecond column\nand here\nMore text\n\n\n\n\n\n\n\nExample 3: Two columns with text center-aligned\nThe example is — slightly redacted — taken again from shafee via StackOverflow.\n\n\n\n\n\n\nShow the markdown code\n\n\n\n\n\n---\ntitle: \"Two columns with text center-aligned\"\nformat: html\nengine: knitr\n---\n\n::: {.cell}\n&lt;style type=\"text/css\"&gt;\n.column {\ntext-align: center;\n}\n&lt;/style&gt;\n:::\n\n:::: {.columns}\n\n::: {.column width=\"30%\"}\n##### First column\n\nI would like to have text here\n\nSentence becomes longer, it should automatically stay in their column\n:::\n\n::: {.column width=\"30%\"}\n##### Second column\n\nand here\n\nMore text\n:::\n\n::::\n\n\n\n\n\n\n\n\n\nShow the result\n\n\n\n\n\n\n\n\n\n\n\nFirst column\nI would like to have text here\nSentence becomes longer, it should automatically stay in their column\n\n\n\nSecond column\nand here\nMore text"
  },
  {
    "objectID": "posts/2023-05-07-creating-a-column-based-layout/index.html#fenced-divs-in-pandoc-how-do-they-work",
    "href": "posts/2023-05-07-creating-a-column-based-layout/index.html#fenced-divs-in-pandoc-how-do-they-work",
    "title": "Creating a column-based layout",
    "section": "Fenced divs in Pandoc: How do they work?",
    "text": "Fenced divs in Pandoc: How do they work?\n\nWhat is Pandoc?\nPandoc is an open-source universal document converter. Pandoc is licensed with the very permissive GNU1 General Public License (GPL). Currently, Pandoc supports the conversion of more than 60 formats. John MacFarlane, a philosophy professor at the University of Berkeley, is developing and maintaining Pandoc.\nRStudio IDE ships with a pandoc binary. The path is stored in the RSTUDIO_PANDOC environment variable. You can get the path and the current pandoc version used by RStudio with rmarkdown::find_pandoc().\n\nrmarkdown::find_pandoc()\n\n$version\n[1] '3.2.1'\n\n$dir\n[1] \"/usr/local/bin\"\n\n\nTo get the version number on your machine type in the terminal:\n\n\nTerminal (slightly redacted)\n\npandoc --version\n(base) path@my_machine quarto-blog % pandoc --version\npandoc 3.1.2\nFeatures: +server +lua\nScripting engine: Lua 5.4\nUser data directory: /Users/path@my_direcotry/.pandoc\nCopyright (C) 2006-2023 John MacFarlane. Web:  https://pandoc.org\nThis is free software; see the source for copying conditions. There is no\nwarranty, not even for merchantability or fitness for a particular purpose.\n(base) path@my_machine quarto-blog % \n\nThis result shows I have two different pandoc versions installed — a potential danger for a version conflict: One version installed RStudio, and the other I downloaded with the macOS package manager Homebrew.\n\n\nDiv Blocks in Pandoc\nThe pandoc div extension allows a special fenced syntax to generate HTML div-tags:\n\nA div starts with a fence containing at least three consecutive colons plus some attributes. The attributes may optionally be followed by another string of consecutive colons. … [O]ne can use either attributes in curly braces or a single unbraced word, which will be treated as a class name. The Div ends with another line containing a string of at least three consecutive colons. The fenced Div should be separated by blank lines from preceding and following blocks. From Extension: fenced_divs\n\nTwo more remarks:\n\nIf you are going to nest pandoc div directives, you must provide more colons for the outer divs than the inner divs.\nTo prevent that Quarto uses the jupyter engine, you must provide engine: knitr in the YAML front matter."
  },
  {
    "objectID": "posts/2023-05-07-creating-a-column-based-layout/index.html#a-genuine-quarto-solution",
    "href": "posts/2023-05-07-creating-a-column-based-layout/index.html#a-genuine-quarto-solution",
    "title": "Creating a column-based layout",
    "section": "A genuine Quarto solution",
    "text": "A genuine Quarto solution\nAfter I looked around at how to create a two-text column layout for a while, I found a simple Quarto answer. Hidden in the help page about figures, I found the remark:\n\nYou can treat any markdown content you want as a figure by enclosing it in Pandoc div block with an identifier prefaced with #fig-. See the first sentence under the header Figure Divs.\n\nThe first part of the sentence, “You can treat any markdown content you want as a figure…” could be reversed to the concept that a layout for figures works similarly to a design for text.\nI came up with the following solution that I also published to answer the StackOverflow post.\n\nVersion 1 with equally wide columns\n\n---\ntitle: \"Two columns layout Quarto with equally wide columns\"\nformat: html\nengine: knitr\n---\n\n::: {layout-ncol=2}\n\n\nFirst column\n\nSecond column\n\nI would like to have text here\n\nand here\n\nSentence becomes longer, it should automatically stay in their column\n\nMore text\n\n:::\nThe above solution uses the Quarto layout-ncol attribute. There is also a layout-nrowattribute. In both directives, you can specify the number of columns respectively rows.\n\n\nVersion 2 with different wide columns\n---\ntitle: \"Two columns layout Quarto with different wide columns\"\nformat: html\nengine: knitr\n---\n\n::: {layout=\"[[10,5], [40,20], [26,13], [2,1]]\"}\n\n\n**First column**\n\n**Second column**\n\nI would like to have text here\n\nand here\n\nSentence becomes longer, it should automatically stay in their column\n\nMore text\n\n:::\nThe version 2 solution uses the general form of the layout attribute. It is followed by a 2-dimensional array where the first dimension defines rows and the second columns. Note that the used row / column numbers in the second version are arbitrary. They just provide the desired proportion of 2:1. The code translates to “create four rows, where the first column has always the double size of the second column.”\nSome final remarks on both of the last examples:\n\nThere needs to be an empty line between every paragraph (here sentence). This structure is necessary so Pandoc can see the break and addresses the next column.\nYou need to use the engine: knitr command to prevent rendering with the jupyter engine."
  },
  {
    "objectID": "posts/2023-05-07-creating-a-column-based-layout/index.html#conclusion",
    "href": "posts/2023-05-07-creating-a-column-based-layout/index.html#conclusion",
    "title": "Creating a column-based layout",
    "section": "Conclusion",
    "text": "Conclusion\nThere are many possibilities for a creative layout design in Quarto. This article shows the use of Pandocs div block directives with five different methods. These layout directives can be generalized from a two-column to a many column layout\n\nSeveral columns with varying percentages of widths.\nSeveral columns using the very flexible bootstrap CSS grid system.\nSeveral columns with formatted explicitly with a CSS style.\nSeveral columns with the same width using the Quarto layout-ncol or layout-nrow attribute.\nSeveral columns with different widths using the Quarto general layout attribute."
  },
  {
    "objectID": "posts/2023-05-07-creating-a-column-based-layout/index.html#footnotes",
    "href": "posts/2023-05-07-creating-a-column-based-layout/index.html#footnotes",
    "title": "Creating a column-based layout",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nGNU is a recursive acronym and means: GNU’s Not Unix.↩︎"
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html",
    "href": "posts/2024-07-24-default-blog-source-code/index.html",
    "title": "Default blog source code",
    "section": "",
    "text": "Start page of my L3Lab blog (Screenshot from 2024-07-23)\nIn this article, I will explain and explore the source code that was automatically generated when I created my blog with RStudio as described in Initializing a Quarto Blog with RStudio."
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#virgin-title-page",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#virgin-title-page",
    "title": "Default blog source code",
    "section": "Virgin Title Page",
    "text": "Virgin Title Page\nHere is the source code of the main index.qmd after the initialization:\n\n\nindex.qmd\n\n---\ntitle: \"quarto-pb-blog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: true\n---\n\nAnd here is the look of the blog’s home page after the first rendering:\n\n\n\n\n\n\nFigure 1: First rendering after initializing a Quarto blog (Screenshot)\n\n\n\nAs you see the title banner shows twice the name of the R project folder ‘quarto-pb-blog’."
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#change-title",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#change-title",
    "title": "Default blog source code",
    "section": "Change Title",
    "text": "Change Title\nThe first line of the homepage’s YAML header in index.qmd is the title. If I change the title to “L3Lab,” only one part of the title banner will change.\n\n\n\n\n\n\nFigure 2: Screenshot of the blog’s homepage after changing the blog listing title in index.qmd\n\n\n\nThe reason is that the upper left text is written in the Quarto project file.\n\n\n_quarto.yml\n\nproject:\n  type: website\n\nwebsite:\n  title: \"quarto-pb-blog\"\n  navbar:\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n\nThe top left name is the website’s title (and not the blog title). A website can have several components, such as a web page and a blog. I will call the website “Life Long Learning Lab,” the blog’s name remains “L3Lab”.\n\n\n\n\n\n\nFigure 3: Screenshot of the blog’s homepage after changing the title of the website in _quarto.yml\n\n\n\nThe website’s header doesn’t look nice. I will change the blog’s design (color, font size, layout, etc.) later in a separate post."
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#explore-listing",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#explore-listing",
    "title": "Default blog source code",
    "section": "Explore Listing",
    "text": "Explore Listing\n\nContents Directive\nListings enable you to automatically generate the contents of a page from a list of Quarto documents. In our case, the blog’s title is actually the home page’s listing title.\nInstead of listing: default for a list of all documents in the directory and a drop-down menu for sorting direction, order criteria, and a search bar, we have specified with content: posts that only the documents in the folder “posts” should be listed. Have a look into the “posts” folder by selecting the “Files” tab in the bottom right pane of RStudio and click on the “posts” folder to open the directory.\n\n\n\n\n\n\nFigure 4: Content of the posts folder immediately after the initialization process\n\n\n\nThe two folders “post-with-code” and “welcome” contain the two dummy articles generated automatically in the initialization process. I will explain the function of the _metadata.yml file later in another post.\nBesides to list all articles of a folder, you can also write much more complex rules for including content by using globs and a list of targets in the contents directive. See for more details the two sections of the Quarto documentation: Listing Contents and Custom Listings.\n\n\nListing Types\nThere are three built-in types of listings you can choose from:\n\n\n\nTable 1: Quarto blog listing types\n\n\n\n\n\nType\nDescription\n\n\n\n\ndefault\nA blog-style list of items.\n\n\ntable\nA table of listings.\n\n\ngrid\nA grid of listing cards.\n\n\n\n\n\n\nI am going to use for my blog the default blog-style list of items. However, it is instructive to see the other types to get a sense of their different appearances.\n\nGrid Listings\n\n\n\n\n\n\nFigure 5: Dummy articles after the blog initialiation in grid listing mode (Screenshot)\n\n\n\n\n\nTable Listings\n\n\n\n\n\n\nFigure 6: Dummy articles after the blog initialiation in table listing mode\n\n\n\n\n\nDefault Listings\n\n\n\n\n\n\nFigure 7: Dummy articles after the blog initialiation in default listing mode (Screenshot)"
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#sort-articles",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#sort-articles",
    "title": "Default blog source code",
    "section": "Sort articles",
    "text": "Sort articles\nUsing the sort option controls the order of the listing. Each sort key can include a field name and optionally either asc or desc to control whether to sort in ascending or descending order. Since the default order is ascending, I had to add desc to get the most current article at the top. The sort key can also contain more than one field to sort."
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#listing-options",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#listing-options",
    "title": "Default blog source code",
    "section": "Listing options",
    "text": "Listing options\nFor every listing type, there are several listing options to specify details, such as:\n\nThe maximum number of items: max-items\nThe height of the image: image-height. The width is automatically determined and the image will fill the rectangle without scaling (i.e., cropped to fill).\nA placeholder for the image: image-placeholder. The default image for items if they do not refer to a special image. For more options, see Listing Options and Advanced Options."
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#categories",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#categories",
    "title": "Default blog source code",
    "section": "Categories",
    "text": "Categories\nListings can also automatically add a list of categories to the page on which they appear. To turn on this behavior, you must set the option for categories to true: categories: true. You can choose between a few different category display styles: numbered, unnumbered, and word cloud.\nWhen users click a category, the page will be updated to show only a listing of the items that match the selected category."
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#sort--and-filter--interface",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#sort--and-filter--interface",
    "title": "Default blog source code",
    "section": "Sort- and Filter- Interface",
    "text": "Sort- and Filter- Interface\nListings support interactive tools that allow the listing viewer to sort, filter, or page through listings.\nI have turned off the sort and filter user interface and applied the default number of items per page for the default listing type: page-size: 25."
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#page-layout",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#page-layout",
    "title": "Default blog source code",
    "section": "Page Layout",
    "text": "Page Layout\nQuarto provides three different default layouts for HTML pages:\n\nThe article layout provides a content area with a page-based grid layout that provides margins, areas for sidebars, and a reading width-optimized body region. I am going to use this layout type for article content. See for more information on article layout.\nThe full layout uses the article grid system but automatically expands the content area to use the sidebar and margin region if no content is placed within those regions. This is useful for layouts that don’t need to be constrained to reading width, and that will benefit from additional horizontal space (e.g., landing or index pages). It is also often appropriate for listing pages.\nThe custom layout provides the possibility to create an individual layout. Learn more on the Page Layout page."
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#title-block-banner",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#title-block-banner",
    "title": "Default blog source code",
    "section": "Title Block Banner",
    "text": "Title Block Banner\nHTML pages rendered with Quarto include a formatted title block at the start of the article. The title block contains the title, subtitle, authors, date, doi, and abstract. There are several options to style the title block. In addition, if you’d like a more prominent title block, you can use title-block-banner to create a banner-style title block.\nFor my blog, I don’t want (at the moment) a title block banner. Setting title-block-banner to false saves space on the title page and feels more prosaic and less business-like.\n\n\n\n\n\n\nFigure 8: Blog homepage without banner for the title block (Screenshot)"
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#git-and-github",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#git-and-github",
    "title": "Default blog source code",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nHere I will pause and commit these changes to Git and GitHub. It is interesting to note that there are – besides index.qmd and _quatro.yml – several other files that have changed.\n\n\n\n\n\n\nFigure 9: List of changed files expalined in this blog post (Screenshot)\n\n\n\nI haven’t even touched many of these files. But the title change propagates the new name into all blog post titles of articles already written and also in the corresponding navigation bars. This is shown with the example of the about page in the next screenshot (Figure 10).\n\n\n\n\n\n\nFigure 10: Changes in the about.qmd file (Screenshot)\n\n\n\nAnd I have committed all these changes I’ve got with this second commit a new status in my GitHub repo.\n\n\n\n\n\n\nFigure 11: Updated GitHub repo after second commit (Screenshot)"
  },
  {
    "objectID": "posts/2024-07-24-default-blog-source-code/index.html#summary",
    "href": "posts/2024-07-24-default-blog-source-code/index.html#summary",
    "title": "Default blog source code",
    "section": "Summary",
    "text": "Summary\nI have explained the different YAML directives for the blog’s homepage file index.qmd, which are generated automatically when the Quarto blog is initialized. During this tour I have changed two options:\n\nThe title of the blog listing in index.qmd and of the website in _quarto.yml.\nI got rid of the title block banner.\n\nTo follow the next sequence of my blog tutorial, check if you have the same starting position.\nThe changes of the source code of the home page index.qmd result to:\n\n\nindex.qmd\n\n---\ntitle: \"L3Lab\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: false\n---\n\nThere are also a change in the website title in the _quatro.yml file:\n\n\n_qarto.yml\n\nproject:\n  type: website\n\nwebsite:\n  title: \"Life Long Learning Lab\"\n  navbar:\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n\nThen I have committed these changes to Git and my dummy GitHub repo."
  },
  {
    "objectID": "posts/2023-04-23-welcome-quarto/index.html",
    "href": "posts/2023-04-23-welcome-quarto/index.html",
    "title": "Bye, Bye Hugo, Welcome Quarto!",
    "section": "",
    "text": "This is the front cover for the CD “Coming Home” by the artist “New Found Glory” via Wikipedia (Fair Use)"
  },
  {
    "objectID": "posts/2023-04-23-welcome-quarto/index.html#my-first-blog-entry-with-quarto",
    "href": "posts/2023-04-23-welcome-quarto/index.html#my-first-blog-entry-with-quarto",
    "title": "Bye, Bye Hugo, Welcome Quarto!",
    "section": "My first blog entry with Quarto",
    "text": "My first blog entry with Quarto\nThis is my first entry in a new blog powered by Quarto. After continuously struggling with the complex machinery blogdown - Hugo - Wowchemy, I feel like coming home from a trip abroad!\nFollowing the Quarto guide Creating a Blog, it took me only 2 (!) minutes to render the provided blog template locally. After just one hour, I had my blog using Quarto, GitHub, and Netlify online. And half of this time, I spent thinking about a name for my blog and what to do with my older and outdated other blogdown web presences. (To put this quick access into perspective: I already had a GitHub account, GitHub credential, and a Netlify account. And I didn’t work on the content of a blog entry but used just the installed test pages.)\nI never was happy with the fast development of Hugo that brought with it many changes and a considerable learning overhead. The same problem happened with the Academic theme by Wowchemy. The end product looked nice and ran fast, but I had already forgotten some of the many details for a good-looking blog post after two weeks. As a result, I spent more time learning the blog machinery than I had time to write about substantive subjects.\nIt was helpful when Yihui Xie introduced `blogdown::checksite()` and the possibility of freezing to a specific Hugo version. But the work in the blogdown-Hugo environment was never intuitive and satisfying. I think it’s self-explanatory that the introductory message to the blogdown book for over two three years now states as a note from the authors: “Some of the information and instructions in this book are now out of date because of changes to Hugo and the blogdown package.”\n\n\n\n\n\n\n\nPreface banner of blogdown: Creating Websites with R Markdown"
  },
  {
    "objectID": "posts/2023-04-23-welcome-quarto/index.html#future-plans",
    "href": "posts/2023-04-23-welcome-quarto/index.html#future-plans",
    "title": "Bye, Bye Hugo, Welcome Quarto!",
    "section": "Future plans",
    "text": "Future plans\nI am sure there will also be some intricacies I must learn and overcome with Quarto, but this will conform with all my other R knowledge. At the moment, my feeling is enthusiastic: It is easy and intuitive to write on this platform. I hope to overcome technical barriers and concentrate on thematic topics finally. Since English is not my mother tongue, it is already difficult enough to express myself precisely about complex content-related questions. I don’t need any additional technical difficulty in writing blog posts.\nIn contrast to my previous website projects, I am planning two different strategies: \n\nI will not go into the details of the website design immediately but will work on these issues from time to time.\nI will not announce the website until I am sure I will use it regularly and long-term. I think that about 10 articles – written in two months – should give me the trust that I will use it sustainably."
  },
  {
    "objectID": "posts/2024-07-22-creating-a-quarto-blog-from-scratch-using-rstudio/index.html",
    "href": "posts/2024-07-22-creating-a-quarto-blog-from-scratch-using-rstudio/index.html",
    "title": "Initializing a Quarto Blog using RStudio",
    "section": "",
    "text": "Image by Mine Çetinkaya-Rundel from Get Started with Quarto - A video to jumpstart your Quarto journey. Featuring a new video for getting started with Quarto using R and RStudio."
  },
  {
    "objectID": "posts/2024-07-22-creating-a-quarto-blog-from-scratch-using-rstudio/index.html#initializing-a-quarto-blog",
    "href": "posts/2024-07-22-creating-a-quarto-blog-from-scratch-using-rstudio/index.html#initializing-a-quarto-blog",
    "title": "Initializing a Quarto Blog using RStudio",
    "section": "Initializing a Quarto Blog",
    "text": "Initializing a Quarto Blog\nThere are several ways to start a new Quarto blog. I will use a menu driven approach using RStudio. For the following workflow you should have installed RStudio and have some knowledge how to use it.\nI will not explain everything related to creating a new Quarto blog; instead, I will focus on my choices to initialize the blog.\nI am using\n\nR version 4.4.1 (2024-06-14)\nQuarto version 1.5.54\n\n\nNew Project…\nInside RStudio, use the New Project… command and select New Directory and then Quarto Blog.\n\n\n\n\n\n\nFigure 1: RStudio new project wizard window (Screenshot): Choose ‘New Directory’ to start an new project from scratch.\n\n\n\n\n\n\n\n\n\nFigure 2: RStudio project type window (Screenshot): Choose ‘Quarto Blog’ to initialize a blog project\n\n\n\n\n\n\n\n\n\nFigure 3: RStudio Create Quarto Blog window (Screenshot): Fill the input fields with the appropriate data\n\n\n\n\nI am using {knitr} as the engine.\nThe {renv} package is for creating reproducible environments for R projects. I will not use it as I have no experience with this complex package, and reproducibility is not an issue for my private blog (at least, I think so at the moment).\nSelecting “Use visual markdown editor” is not important, as this option is for all .qmd files in RStudio always available. I think that this option only controls the default behavior whenever a new file for a post is created.\n\n\n\nKey Files\nClicking the “Create Project” button generates different key files and opens the _quarto.yml file in the RStudio editor window.\n\n\n\n\n\n\nFigure 4: RStudio file listing window (Screenshot): Choose ‘New Directory’ to start an new project from scratch.\n\n\n\nIf you can’t see all five files starting with a dot (so-called dotfiles) in your installation, go to the drop-down menu ‘More’ and check the last option ‘Show Hidden Files’.\nHere’s a summary of the key files created within the starter blog project:\n\n\n\nTable 1: Key files after initializing a Quarto blog\n\n\n\n\n\nFile\nDescription\n\n\n\n\n_quarto.yml\nQuarto project file.\n\n\nindex.qmd\nBlog home page.\n\n\nabout.qmd\nBlog about page.\n\n\nposts/\nDirectory containing posts\n\n\nposts/_metadata.yml\nShared options for posts\n\n\nstyles.css\nCustom CSS for website\n\n\n\n\n\n\n\n\nContent of the Quarto Project File\nHere is the content of _quarto.yml:\n\n\n_quarto.yml\n\nproject:\n  type: website\n\nwebsite:\n  title: \"quarto-pb-blog\"\n  navbar:\n    right:\n      - about.qmd\n      - icon: github\n        href: https://github.com/\n      - icon: twitter\n        href: https://twitter.com\nformat:\n  html:\n    theme: cosmo\n    css: styles.css\n\n\n\nContent of the Blog Home Page\nHere is the content of index.qmd:\n\n\nindex.qmd\n\ntitle: \"quarto-pb-blog\"\nlisting:\n  contents: posts\n  sort: \"date desc\"\n  type: default\n  categories: true\n  sort-ui: false\n  filter-ui: false\npage-layout: full\ntitle-block-banner: true\n---"
  },
  {
    "objectID": "posts/2024-07-22-creating-a-quarto-blog-from-scratch-using-rstudio/index.html#render-blog",
    "href": "posts/2024-07-22-creating-a-quarto-blog-from-scratch-using-rstudio/index.html#render-blog",
    "title": "Initializing a Quarto Blog using RStudio",
    "section": "Render Blog",
    "text": "Render Blog\n\n\n\n\n\n\nFigure 5: Source code of the blog home page ‘index.qmd’-file within RStudio window (Screenshot)\n\n\n\nYou can control via Tools-&gt;Global Options…-&gt;R Markdown-&gt;Show output preview in… whether the rendered result appears in the browser window or in the viewer pane. Generally, I use the “Window” option because it gives me a better view of the real setting.\n\n\n\n\n\n\nFigure 6: Website of the newly created Quarto blog (Screenshot):\n\n\n\n\n\nRStudio console output\n\n==&gt; quarto preview index.qmd --to html --no-watch-inputs --no-browse\n\npandoc to: html\n  output-file: index.html\n  standalone: true\n  title-prefix: quarto-pb-blog\n  section-divs: true\n  html-math-method: mathjax\n  wrap: none\n  default-image-extension: png\n  css:\n    - styles.css\n  \nmetadata\n  document-css: false\n  link-citations: true\n  date-format: long\n  lang: en\n  theme: cosmo\n  title: quarto-pb-blog\n  listing:\n    contents: posts\n    sort: date desc\n    type: default\n    categories: true\n    sort-ui: false\n    filter-ui: false\n  page-layout: full\n  title-block-banner: true\n  \nWARN: Unable to read listing item description from posts/post-with-code/index.html\nWARN: Unable to read listing item description from posts/welcome/index.html\nWARN: Unable to read listing preview image from posts/welcome/index.html\nOutput created: _site/index.html\n\nPreparing to preview\n[1/4] posts/post-with-code/index.qmd\nR version 4.4.1 (2024-06-14)\n\nprocessing file: index.qmd\n                                                                                                            \noutput file: index.knit.md\n\n[2/4] posts/welcome/index.qmd\n[3/4] about.qmd\n[4/4] index.qmd\n\nWatching files for changes\nBrowse at http://localhost:5146/\nGET: /\n\n\n\n\n\n\n\nDuring the rendering process, I got three warnings\n\n\n\n\n\nAs you can see in the above console output I got three warnings:\n\nUnable to read listing item description from posts/post-with-code/index.html\nUnable to read listing item description from posts/welcome/index.html\nUnable to read listing preview image from posts/welcome/index.html\n\n\n\n\nThese warnings are prompted by the fact that we need to render the complete blog with SHIFT-CMD-B or by clicking “Render Website” after choosing the “Build” button on the upper right RStudio pane. I will explain render strategies in a later post."
  },
  {
    "objectID": "posts/2024-07-22-creating-a-quarto-blog-from-scratch-using-rstudio/index.html#summary",
    "href": "posts/2024-07-22-creating-a-quarto-blog-from-scratch-using-rstudio/index.html#summary",
    "title": "Initializing a Quarto Blog using RStudio",
    "section": "Summary",
    "text": "Summary\nThis is the end of the initialization process. In later blog posts I will add more functionality and style the web page it to get a more attractive appearance of the Quarto blog."
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Send me a message!\n\n  \n    Your Name: \n  \n  \n    Your Email: \n  \n  \n    \n      Don’t fill this out if you’re human: \n    \n  \n  \n    Message:    \n  \n  \n    Send\n  \n\n\n\n\n Back to top"
  },
  {
    "objectID": "posts/2023-05-05-how-to-delete-git-branches/index.html",
    "href": "posts/2023-05-05-how-to-delete-git-branches/index.html",
    "title": "How to delete Git branches",
    "section": "",
    "text": "As I am not very experienced with R and coding, my knowledge of using Git and GitHub is limited. Usually, I use the pr_*() family of {usethis} functions as pull request helpers. They work very well – as long as the workflow follows the standard (successful) workflow:\n\nInitiate the pull request with pr_init(&lt;branch name&gt;)\nSubmit the changes in the new branch with pr_push().\nClick the “Create pull request”-button to make the PR.\nAfter the code is accepted and merged, conclude the process with pr_finish().\n\nThis sequence does not fly if the workflow deviates from the above model. The standard procedure describes the scenario of a discussion between contributor and reviewer that finally results in the acceptance of the PR. But what about a rejection of the PR?"
  },
  {
    "objectID": "posts/2023-05-05-how-to-delete-git-branches/index.html#if-a-pull-request-is-not-accepted",
    "href": "posts/2023-05-05-how-to-delete-git-branches/index.html#if-a-pull-request-is-not-accepted",
    "title": "How to delete Git branches",
    "section": "",
    "text": "As I am not very experienced with R and coding, my knowledge of using Git and GitHub is limited. Usually, I use the pr_*() family of {usethis} functions as pull request helpers. They work very well – as long as the workflow follows the standard (successful) workflow:\n\nInitiate the pull request with pr_init(&lt;branch name&gt;)\nSubmit the changes in the new branch with pr_push().\nClick the “Create pull request”-button to make the PR.\nAfter the code is accepted and merged, conclude the process with pr_finish().\n\nThis sequence does not fly if the workflow deviates from the above model. The standard procedure describes the scenario of a discussion between contributor and reviewer that finally results in the acceptance of the PR. But what about a rejection of the PR?"
  },
  {
    "objectID": "posts/2023-05-05-how-to-delete-git-branches/index.html#deletion-of-the-remote-branch-with-github-is-not-enough",
    "href": "posts/2023-05-05-how-to-delete-git-branches/index.html#deletion-of-the-remote-branch-with-github-is-not-enough",
    "title": "How to delete Git branches",
    "section": "… deletion of the remote branch with GitHub is not enough",
    "text": "… deletion of the remote branch with GitHub is not enough\nThis situation happened to me after I proposed fixing a typo for a repo that had been frozen because of a necessary general overhaul. I thought to delete the submitted remote branch at the GitHub site would bring me back to my initial position.\n\n\n\n\n\n\n\nScreenshot 1: Delete obsolete branch “typo” at GitHub site (simulated for this article).\n\n\nBut back in RStudio, it turned out that the deleted branch was still there.\n\n\n\n\n\n\n\nScreenshot 2: Local and Remote branches seen in RStudio\n\n\nOk, I understood that my remote action did not delete the local branch too. But why was the remote branch still there? After all, I had it just removed. (I double-checked the deletion, and the remote branch at the remote GitHub site was, in fact, completely gone."
  },
  {
    "objectID": "posts/2023-05-05-how-to-delete-git-branches/index.html#there-are-three-not-two-branches",
    "href": "posts/2023-05-05-how-to-delete-git-branches/index.html#there-are-three-not-two-branches",
    "title": "How to delete Git branches",
    "section": "There are three, not two branches",
    "text": "There are three, not two branches\nAfter some research, I found an appropriate question-answer dialog (How do I delete a Git branch locally and remotely?) at StackOverflow with more than 11 million views! It seems that I am not the only one surprised by the situation.\nAfter reading this and other answers at SO, I learned that there are three different branches:\n\nWhen you’re dealing with deleting branches both locally and remotely, keep in mind that there are three different branches involved:\n\nThe local branch X.\nThe remote origin branch X.\nThe local remote-tracking branch origin/X that tracks the remote branch X. Quote from the top second answer\n\n\nI deleted the remote origin branch X manually at the GitHub site. The local branch but also the local remote-tracking branch were still functional!\nFor every one of these three branches, one needs different commands to delete them. And here – as far as I understood – we have met the limits of RStudio and/or {usethis}. For the following commands, you have to change from the console to the terminal."
  },
  {
    "objectID": "posts/2023-05-05-how-to-delete-git-branches/index.html#useful-commands-for-deleting-branches",
    "href": "posts/2023-05-05-how-to-delete-git-branches/index.html#useful-commands-for-deleting-branches",
    "title": "How to delete Git branches",
    "section": "Useful commands for deleting branches",
    "text": "Useful commands for deleting branches\n\n\n\n\n\n\nSet comment character for interactive terminal use\n\n\n\n\n\nIf you are using the Z shell (zsh) you have to set setopt interactivecomments for interactive use either in your ~/.zshrc file or write this command into the terminal for temporary use during the terminal session. In contrast to ksh (Korn shell), sh (Bourne shell), and bash (Bourne-again shell) the # is for the zsh (Z shell) only set as the comment character for non-interactive use (scripts).\n\n\n\n\nDeleting a remote branch\n\n\nTerminal\n\nsetopt interactivecomments\ngit push origin -d &lt;branch&gt;\n\n\n\nDeleting a local branch\n\n\nTerminal\n\ngit checkout master # change branch, you can't delete a branch you are working on\ngit branch -d &lt;branch&gt;\ngit branch -D &lt;branch&gt; # force-delete un-merged branches\n\n\n\nDeleting a local remote-tracking branch\n\n\nTerminal\n\ngit branch -dr &lt;remote&gt;/&lt;branch&gt; # 'dr' stands for \"delete remotes\"\ngit branch -dr origin/dev        # example\n\n# Delete multiple obsolete remote-tracking branches\ngit fetch &lt;remote&gt; -p  # 'p' stands for \"prune\"\ngit fetch origin -p    # example\n\n\n\n\n\n\n\nWarning\n\n\n\nDon’t forget to refresh the RStudio listing to verify that you have deleted the branches.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nClick on the circle symbol at the top right corner…\n\n\n\n\n\n\n\n\n\n\n… and choose “Refresh Now” to list the branches currently available."
  },
  {
    "objectID": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html",
    "href": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html",
    "title": "From Git to GitHub using RStudio",
    "section": "",
    "text": "The following procedure requires some credential setup for GitHub on your end. There are several routes you can go:\n\nSet up the GitHub repo first. It my sound counter-intuitive, but the easiest way to get your work onto GitHub is to initiate a GitHub repo first, then use RStudio to start working in a synced local copy. This approach is described in Happy Git’s workflows New project, GitHub first and Existing project, GitHub first.\nCommand line Git. I will use this approach to add a remote repository post hoc. This is described detailed in the Happy Git workflow Existing project, GitHub last."
  },
  {
    "objectID": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#requirements-to-follow-this-post",
    "href": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#requirements-to-follow-this-post",
    "title": "From Git to GitHub using RStudio",
    "section": "",
    "text": "The following procedure requires some credential setup for GitHub on your end. There are several routes you can go:\n\nSet up the GitHub repo first. It my sound counter-intuitive, but the easiest way to get your work onto GitHub is to initiate a GitHub repo first, then use RStudio to start working in a synced local copy. This approach is described in Happy Git’s workflows New project, GitHub first and Existing project, GitHub first.\nCommand line Git. I will use this approach to add a remote repository post hoc. This is described detailed in the Happy Git workflow Existing project, GitHub last."
  },
  {
    "objectID": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#why-using-git-and-github",
    "href": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#why-using-git-and-github",
    "title": "From Git to GitHub using RStudio",
    "section": "Why using Git and GitHub?",
    "text": "Why using Git and GitHub?\nAfter initializing a new Quarto blog I will create the initial (first) Git commit, initialize a GitHub repo, and push the content of the initial commit into the new repository.\nThere are several reasons to use Git:\n\nA Git repository (or repo) holds all the project files and their entire revision history. It is therefore not only easier to track changes but also to restore a previous version if necessary. (See the nice introduction)\nGitHub is an online platform to store and manage your content (code but also text and other resources), as well as track changes to it. It facilitates collaborations with your team but also with other (unknown) people."
  },
  {
    "objectID": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#procedure-for-using-git",
    "href": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#procedure-for-using-git",
    "title": "From Git to GitHub using RStudio",
    "section": "Procedure for using Git",
    "text": "Procedure for using Git\nIn the previous blog post, we have already initialized the Quarto weblog, including Git support, by checking the appropriate check box.\n\nTo see all the changes you have made so far, click on the Git tab at the top right pane of RStudio. You should see a picture similar to the following one.\n\n\n\n\n\n\n\nFigure 1: Selected the Git tab of the RStudio right top pane (Screenshot):\n\n\n\n\nAfter selecting all files and checking them (checking a single file of a group of selected files checks all selected files), the Git window shows all files seen above but also the files inside folders that are now prepared for the next Git commit.\n\n\n\n\n\n\n\nFigure 2: Selecting all added or changed files in the RStudio Git pane (Screenshot)\n\n\n\n\nAfter clicking on the “Commit” tab (or using the shortcut CTRL-ALT-M) a window opens for writing the commit message. Write short notes using a commando language. For example a commit text for the main index.qmd file could be: “change title-block-banner to true”.\n\nIt is usual to start the commit messages with “initial commit”. I had erroneously used “first commit” in the screenshot.\n\n\n\n\n\n\n\nFigure 3: Writing a commit message (Screenshot)\n\n\n\n\nAfter clicking the Commit button, RStudio presents a window with the results of the action:\n\n\n\n\n\n\n\nFigure 4: Resulted actions after the last commit (Screenshot)\n\n\n\nClosing both windows will end the Git procedure to the local repository."
  },
  {
    "objectID": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#procedure-for-initializing-a-github-repo",
    "href": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#procedure-for-initializing-a-github-repo",
    "title": "From Git to GitHub using RStudio",
    "section": "Procedure for initializing a GitHub repo",
    "text": "Procedure for initializing a GitHub repo\nNext create a GitHub repo with all the locally committed content. I am using here the {usethis} package because it automates all the necessary steps. However, — as I mentioned above — there are several requirements before you can create and connect a GitHub repo. With Happy Git and GitHub for the useR you should read and learn how to connect an RStudio project to GitHub under different conditions. In this case, I have applied Chapter 17, “Existing project, GitHub last”.\n\nWrite usethis::use_github() into the console window of the RStudio window (lower left pane). After return your console will display the following lines:\n\n\n\n\n\n\n\nFigure 5: Text of the RStudio window console window (Screenshot)\n\n\n\nThe screenshot above shows the different actions for the usethis::use_github() command. In the last step, the newly generated and updated repository on GitHub was opened.\n\n\n\n\n\n\nFigure 6: Web page of the GitHub repository of the Quarto blog after the initial commit"
  },
  {
    "objectID": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#summary",
    "href": "posts/2024-07-23-from-git-to-github-using-rstudio/index.html#summary",
    "title": "From Git to GitHub using RStudio",
    "section": "Summary",
    "text": "Summary\nThis post shows how to initialize Git and GitHub using RStudio after crating of the brand-new Quarto blog:\n\nCommit all the files generated automatically after launching the Quarto blog (as described in Initializing a Quarto Blog with RStudio) to the local Git repository.\nInitializing a remote GitHub repository, connecting the local repo with it, and connecting it with the local repo."
  },
  {
    "objectID": "posts/2024-07-21-writing-blog-posts--new-attempt/index.html",
    "href": "posts/2024-07-21-writing-blog-posts--new-attempt/index.html",
    "title": "Writing Blog Posts: New Attempt",
    "section": "",
    "text": "Photo from The XY Code. CC BY-NC-ND 4.0"
  },
  {
    "objectID": "posts/2024-07-21-writing-blog-posts--new-attempt/index.html#motivations-for-writing-blog-posts",
    "href": "posts/2024-07-21-writing-blog-posts--new-attempt/index.html#motivations-for-writing-blog-posts",
    "title": "Writing Blog Posts: New Attempt",
    "section": "Motivations for writing blog posts",
    "text": "Motivations for writing blog posts\nMy conception, written in my first blog entry, needed to be revised. The problem was a certain kind of perfectionism: I thought that my knowledge about R issues was not deep enough to be interesting to other people. After visiting the useR!2024 conference, I changed my view in four aspects:\n\nR has a dynamic community where new people are constantly attracted. My meager knowledge could be helpful, especially for beginners, as I was struggling with the same starter issues not long ago. Sometimes, a person with intermediate knowledge can be more beneficial than an expert.\nThe R project is a very complex field. Nobody has the same level of expert knowledge in every area. Therefore, it is possible that some parts of my knowledge could be useful for other people, even if they are (in other areas or generally) much more advanced.\nPutting my understanding into words so that other people can use this information for their project is an important exercise: It ensures that I have grasped the essentials and fosters my learning by writing down all the necessary details.\nThe most important reason to write blog posts about issues I have learned is the “Future me.” After several months of working on other topics, I often notice that I have forgotten some details of procedures I have already learned.\n\nTo elaborate on the last point: In one case, I was looking for a solution to a problem I experienced. After several web searches, I found the solution on StackOverflow. I was shocked when I noticed that it was me who wrote the correct answer several years ago!"
  },
  {
    "objectID": "posts/2024-07-21-writing-blog-posts--new-attempt/index.html#a-new-start",
    "href": "posts/2024-07-21-writing-blog-posts--new-attempt/index.html#a-new-start",
    "title": "Writing Blog Posts: New Attempt",
    "section": "A new start",
    "text": "A new start\nAfter the useR!2024, I was very motivated to resume the Quarto blog I started in April 2023. I noticed that there are two versions: One published via Netlify and another one – already pretty elaborated – locally.\n\nLooking for a glitch\nThe local version had a small but annoying flaw. It displayed three colons ::: at the beginning of the listing on the homepage and at the end of every post. I knew that ::: represents special fenced syntax for native Div blocks in pandoc.\nWhatever I tried, I could not find the problem and solve it.\n\nI looked into all articles to see if there was a redundant fenced syntax symbol.\nI set for all posts draft: true.\nI even cloned the remote repo only to get the same behavior.\n\n\n\nStarting from scratch\nAnother drawback was that I did not understand many code lines, especially in _quarto.yml but also in posts/_metadata.yml and in the main index.qmd.\nFinally, I decided to start with a new blog. I created a new repo with a different name, initiated a new RStudio project, and so on. As a surplus, I documented every single step. I wrote extensive notes and shot screenshots of every necessary action. After each tiny change, I checked the results by rendering the blog.\n\n\nLesson learned\nAs a result, I have extensive material to explain how to initialize a Quarto blog, which I will publish in several posts in the next few days. And I finally found the reason for the surplus fenced div!\n\n\n\n\n\n\nTip 1: href-URLs without quotation marks in YAML file\n\n\n\n\n\nThe URLs of the right part of the footer text were incorrectly in quotation marks. This would be a perfect passage in HTML, but it was inappropriate as a Quarto directive.\nI wrote:\n\n\n_quarto.yml\n\n    right:\n      - text: Proudly powered by &lt;a href=\"https://quarto.org/\"&gt;Quarto&lt;/a&gt;\n\nInstead of:\n\n\n_quarto.yml\n\n    right:\n      - text: Proudly powered by &lt;a href=https://quarto.org/&gt;Quarto&lt;/a&gt;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "L3Lab",
    "section": "",
    "text": "Default blog source code\n\n\nExplaining generated default source code after initializing a Quarto Blog with RStudio\n\n\n\nhow-to\n\n\nquarto\n\n\n\n\n\n\n\n\n\n2024-07-24\n\n\nPeter Baumgartner\n\n\n14 min\n\n\n2024-07-25\n\n\n\n\n\n\n\n\n\n\n\n\nFrom Git to GitHub using RStudio\n\n\n\n\n\n\ngit\n\n\ngithub\n\n\nrstudio\n\n\n\nThis post shows how to create the initial (first) Git commit using RStudio. I will initialize a GitHub repo, and push the content of the initial commit into the new repository.\n\n\n\n\n\n2024-07-23\n\n\nPeter Baumgartner\n\n\n8 min\n\n\n2024-07-25\n\n\n\n\n\n\n\n\n\n\n\n\nInitializing a Quarto Blog using RStudio\n\n\nCreating a Quarto blog from scratch using RStudio. – A visual guide.\n\n\n\nblog\n\n\nquarto\n\n\nrstudio\n\n\n\nInitializing a Quarto blog, explaining the generated key files and the starting content of the Quarto project file _quarto.yml and the blog homepage file index.qmd. \n\n\n\n\n\n2024-07-22\n\n\nPeter Baumgartner\n\n\n8 min\n\n\n2024-07-25\n\n\n\n\n\n\n\n\n\n\n\n\nWriting Blog Posts: New Attempt\n\n\nNew motivations for writing blog posts\n\n\n\nblog\n\n\nquarto\n\n\n\nI planned to write at least ten articles within two months before I wanted to publish my new blog. I never reached this limit last year, guided wrongly by perfectionism. \n\n\n\n\n\n2024-07-21\n\n\nPeter Baumgartner\n\n\n4 min\n\n\n2024-07-21\n\n\n\n\n\n\n\n\n\n\n\n\nCreating a column-based layout\n\n\nChanging the Page Layout in Quarto\n\n\n\nblog\n\n\nquarto\n\n\nhow-to\n\n\n\nDo you want to place two figures side by side or write text in parallel in different columns? The post describes four methods to turn part of your blog post into a column-based layout. \n\n\n\n\n\n2023-05-07\n\n\nPeter Baumgartner\n\n\n8 min\n\n\n2024-07-21\n\n\n\n\n\n\n\n\n\n\n\n\nHow to delete Git branches\n\n\nThe limits of RStudio with the pr_*() family of the {usethis} functions\n\n\n\ngit\n\n\ngithub\n\n\nhow-to\n\n\n\nThe article explains how I finally succeeded in deleting different branches in Git. It turned out – contrary to my previous mental model – that there are not only two branches but three (local, remote origin, and local remote-tracking branch). \n\n\n\n\n\n2023-05-05\n\n\nPeter Baumgartner\n\n\n4 min\n\n\n2024-07-21\n\n\n\n\n\n\n\n\n\n\n\n\nBye, Bye Hugo, Welcome Quarto!\n\n\nMy first blogging impressions with Quarto\n\n\n\nblog\n\n\nquarto\n\n\n\nThis is my first entry in a new blog powered by Quarto. After continuously struggling with a complex machinery (blogdown, Hugo, Wowchemy), I feel like coming home from a trip abroad!\n\n\n\n\n\n2023-04-23\n\n\nPeter Baumgartner\n\n\n4 min\n\n\n2024-07-21\n\n\n\n\n\n\nNo matching items\n\n Back to top"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Peter Baumgartner",
    "section": "",
    "text": "I am a retired professor of Education Technology. As head of the Department of Interactive Media and Educational Technologies at the University for Continuing Education Krems (UWK) (Austria), I researched how to apply technology in settings of Life Long Learning. \nI had held positions as a professor at several universities in Austria and Germany (Klagenfurt, Münster, Innsbruck, Hagen) before I accepted the nomination to Krems. I published 25 books (10 monographs and 15 edited volumes) and over 200 articles.\nWith my retirement, I became a Life Long Learner myself. I am interested in studying workflows for Open Science research, focusing on note-taking apps like Obsidian, Hypothes.is, etc., and the R programming language for statistical computing and data science.\n\n\n Back to top"
  }
]